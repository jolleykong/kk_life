# 面向对象相比函数来说，函数用的更多一些。
# 一部分函数解决不了的问题，只有oop能解决，但是占比不是很多。

# 面向对象是一种思想。

# 内容大纲
'''
1. 面向过程编程 vs 函数式编程 vs 面向对象编程
2. 面向对象的结构
3. 从类名的角度使用类
    - 类名调用类中的属性
    - 类名调用类中的方法
4. 实例化一个对象
    - 实例化对象发生了三件事
    - 对象调用对象的属性
    - 对象调用类中的属性
    - 对象调用类中的方法
5. 什么是self？
6. 一个类可以实例化多个对象
'''

# 1. 面向过程编程 vs 函数式编程 vs 面向对象编程
# 求字符串长度：面向过程编程：
s1 = 'andfadsfadf'
count = 1
for i in s1:
    count += 1
s2 = 'asdfijnvoasdfv'
count = 1
for i in s2:
    count += 1

# 求字符串长度：函数式编程：提高代码可读性， 减少了代码的重复性。
def strlen(a):
    count = 1
    for i in a:
        count += 1

''' 面向过程及函数式编程统称为面向过程编程。
# 面向过程编程：
    优势：出色的完成之前制定的需求，而且逻辑性很强。
    劣势：但凡更改或者增加需求，可能整个项目都随之改变，牵一发而动全身。

# 面向对象：
    类是相似功能的集合体。
        把功能相近的功能代码、函数按照类别去定义。在结构上明确的分类。
    类：要站在上帝的角度去考虑问题。

    类：具有相似功能和特性的一类事物。（如：人类）
    对象：类的具体体现。（如：人类中的一员，就是一个对象）
    要有宏观的概念，区分类与对象。类是一个公共模板，对象是从这个模板产出的。

    类由属性和方法两部分组成。变量在类中被称为属性，函数在类中被称为方法。
'''

# 2. 面向对象的结构
class Student:      # 约定俗成，类名具有描述性，首字母大写。
                    # 类名不宜用下划线_，而使用驼峰体。
    "I'm doc part This is a class named Student."
    daily = '学习'   # 类由变量和函数两部分组成。只有这两部分。在类中被称为 属性和方法。

    mission = '考试' # 变量（属性）。 在类中叫 静态属性 或 属性，曾经也叫静态字段。

    def work(self):         # 函数。在类中被称为方法，也叫动态方法、远古也叫动态属性。
        print('每天上课')     # self 不要想太多，只是个位置参数。

    def homework(self):     # 函数（方法）。
        print('写作业')


# 3. 从类名的角度使用类
#     - 类名调用类中的属性
''' 一般类中的属性都是通过 类名. 的方式去操控的'''

# 查看类中的所有内容，类名.__dict__ ，只用于获取类中的全部。
print(Student.__dict__)
# print(Student.__dict__['work'])

# 使用. 调取类中特定的属性来查看
print(Student.daily)        # 学习

# 使用. 在类中新增一个属性
Student.clothes = '校服'    # 新增 clothes 属性
print(Student.__dict__)

# 使用. 在类中修改一个属性
Student.mission = '逃学'    # 修改 mission 属性的值
print(Student.__dict__)

# 使用. 在类中删除一个属性      # 删除 mission 属性
del Student.mission
print(Student.__dict__)


#     - 类名调用类中的方法
''' 一般类中的方法（除去类方法和静态方法之外）不通过类名调用，而是通过对象去调用的。'''

# 通过类名.方法名 调用的时候，方法定义的self 位置参数必须被传参。
# Student.work()  # 报错
Student.work(111)   # 每天上课

''' 一般类中的方法（除去类方法和静态方法之外）不通过类名调用，而是通过对象去调用的。'''

